package Monitor;
/**
 * Classe principal que roda no sistema monitor
 * @author Edson Vieira
 * @author Miguel Cabral
 */

import Comon.ColecaoResponsavel;
import Comon.ColecaoComputador;
import Comon.Computador;
import Comon.Responsavel;
import io.Ler;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.ArrayList;


public class Main {
	public static File registro = new File("registro.log");
	public static ColecaoComputador  pcs  = new ColecaoComputador();
	public static ColecaoResponsavel colResp = new ColecaoResponsavel();
	public static ArrayList<String> hosts;
	public static ArrayList<String> intrusos;
	public static Computador MONITOR;
	
	public static void main(String[] args) {
		try{
			MONITOR = new Computador();
		} catch (Exception e) {
			System.out.print("Digite o IP da sua rede: ");
			MONITOR.setIp(Ler.ip());
		}
		
		colResp=Monitorar.lerAdminDoXML();
	
		Responsavel resp = login();
		
		if (!colResp.verificarResp(resp)) {
			System.out.println("ADMIN invalido");
			return;
		}
		
		// Inicializacao : Listar todos dispositivos com IP na rede
		//hosts = Monitorar.DispConectados(MONITOR.getIP());
		
		int opcao;
		while(true) {
			menu();
			opcao = Ler.inteiro();
			if (opcao == 1) {
				while(true){
					menuInfo();
					opcao = Ler.inteiro();
					if		  (opcao == 1) { listarTudo(); 
					} else if (opcao == 2) { infoConectados(hosts);
					} else if (opcao == 3) { buscarInfo();
					} else if (opcao == 4) { listarIntrusos(hosts);
					} else if (opcao == 5) { gerarLogDispositivos(resp, intrusos, pcs);
					} else if (opcao == 6) { break;
					} else { System.out.println("Digite um Valor entre 1 e 5");
				    }
				}
			} else if (opcao == 2) {
				while(true){ 
					menuProcesso();
					opcao = Ler.inteiro();
					if		  (opcao == 1) { capturarPortas();
					} else if (opcao == 2) { capturarPortasAll(hosts);
					} else if (opcao == 3) { break;
					} else { System.out.println("Digite um Valor entre 1 e 3");
				    }
				}
			} else if (opcao == 3) {
				while(true) {
					menuCaptura();
					opcao = Ler.inteiro();
					if		  (opcao == 1) { capturaTela();
					} else if (opcao == 2) { capturaTelaAll(hosts);
					} else if (opcao == 3) { break;
					} else { System.out.println("Digite um Valor entre 1 e 3");
			        }
			    }
			} else if (opcao == 4) {
				while(true) {
					menuDesligar();
					opcao = Ler.inteiro();
					if (opcao == 1) 	   { desligarPC();
					} else if (opcao == 2) { desligarAll(hosts);
					} else if (opcao == 3) { break;
					} else { System.out.println("Digite um Valor entre 1 e 3");
			        }
			    }		
			}else if (opcao == 5) {
				while(true) {
					menuAdmin();
					opcao = Ler.inteiro();
					if		  (opcao == 1) { addAdmin();
					} else if (opcao == 2) { delAdmin();
					} else if (opcao == 3) { editAdmin();
					} else if (opcao == 4) { listAdmin();
					} else if (opcao == 5) { break;
					} else { System.out.println("Digite um Valor entre 1 e 3");
			        }
				}
			}else if (opcao == 6) { 
				Monitorar.salvaAdminEmXML(colResp);
				gerarLogDispositivos(resp, intrusos, pcs);
				break;
			} else { System.out.println("Digite um Valor entre 1 e 5"); }
		}
	}

	private static void menu(){
		System.out.println(	"\n---------MONITOR DE REDE-----------\n"						 +
							"1- Buscar Informacoes de Dispositivos Conectados\n"			 + // menuInfo()
							"2- Capturar Processos de Rede ativos em Dispositivo Conectado\n"+ // menuProcesso()
							"3- Capturar tela de Dispositivos Conectados\n"					 + // menuCaptura()
							"4- Desligar Dispositivos Conectados\n"							 + // menuDesligar()
							"5- Adminitrador\n"                                              +//menuAdmin()
				            "6- Encerrar programa");
		System.out.print("opcao: ");
	}
	
	private static void menuInfo() {
		System.out.println( "\n----------Menu Informacoes-----------\n"			+
	                        "1- Listar Dispositivos Conectados\n"               + // listarTudo()
							"2- Listar Informacoes de Dispositivos Conectados\n"+ // listarConectados()
							"3- Buscar Informacoes de um Dispositivo por IP\n"	+ // buscarInfo()
							"4- Listar IP de dispositivos intrusos\n"			+ // listarIntrusos()
							"5- Salvar log de informacoes em arquivo\n"			+ // gerarLogDispositivos()
							"6- Retornar ao menu principal");
		System.out.print("opcao: ");
	}
	
	private static void menuProcesso() {
		System.out.println(	"\n----------Menu Processos-----------\n"					  +
							"1- Capturar Processos de um Dispositivo IP\n"				  + // capturarPortas()
							"2- Capturar Processos de Todos os Dispositivos de uma rede\n"+ // capturarPortasAll()
							"3- Retornar ao menu principal");
		System.out.print("opcao: ");
	}
	
	private static void menuCaptura(){
		System.out.println(	"\n----------Menu Consultas-----------\n"				 +
							"1- Capturar tela de um Ãºnico Dispositivo por ip\n"     + // capturaTela()
							"2- Capturar tela de Todos os Dispositivos de uma Rede\n"+ // capturaTelaAll()
							"3- Retornar ao menu Principal");						
		System.out.print("opcao: ");
	}
	
	private static void menuDesligar(){
		System.out.println(	"\n----------Menu Desligar-----------\n"		 +
							"1- Desligar Dispositivo por ip\n"				 + // desligarPC()
							"2- Desligar todos os Dispositivos de uma Rede\n"+ // desligarAll()
							"3- Retornar ao menu Principal");
		System.out.print("opcao: ");
	}
	
	private static void menuAdmin(){
		System.out.println(	"\n----------Menu Administrador-----------\n"		 +
				            "1- Adicionar Administradoro\n"				                     + // adddUser()
			              	"2- Remover Administrador por matricula\n"                       + // delUser()
				            "3- Editar Administrador por matricula\n"                       +//  editUser()
				            "4- Listar Administrador\n"                                        +//listUser()    
			              	"5- Retornar ao menu Principal");
        System.out.print("opcao: ");
	}

	private static void listarTudo(){
		System.out.println("1-Exibir Dispositivos ja verificados\n" +
	                       "2-Atualizar Lista de Dispositivos\n"+
	                       "opcao:");
		int x=Ler.inteiro();
		if (x==1) {
			System.out.println("Considerando /24");
			System.out.println("Dispositivos conectados na rede informada:");
			for(String host : hosts)
				System.out.println(host);
		}else if (x==2) {
			hosts = Monitorar.DispConectados(MONITOR.getIP());
			System.out.println("Considerando /24");
			System.out.println("Dispositivos conectados na rede informada:");
			for(String host : hosts)
				System.out.println(host);
		}else {System.out.println("opcao invalida");}
	}
	
	
	private static void buscarInfo(){
		String ip = Ler.ip();
		try {
			Computador pc = Monitorar.infoUmDisp(ip);
			System.out.println(pc);
			System.out.print("Deseja salvar no log [s/n] ? ");
			String resp = Ler.string();
			if (resp.equals("s")) {
				FileWriter arq = new FileWriter(registro);
			    PrintWriter gravarArq = new PrintWriter(arq);
			    gravarArq.print(LocalDateTime.now()+"\n");
			    gravarArq.print("Dispositivo: "+pc.toString());
			    gravarArq.close();
			}
		} catch (Exception e) { System.out.println(e.getMessage());}
	}
	
	private static void listarIntrusos(ArrayList<String> hosts){
		intrusos = Monitorar.intruso(MONITOR.getIP(), hosts);
		System.out.println("Dispositivos conectados sem aplicacao cliente:");
		for (String ip : intrusos)
			System.out.println(ip);
	}
	
	private static void gerarLogDispositivos(Responsavel resp, ArrayList<String> intruso, ColecaoComputador laboratorio){
		try {
			BufferedWriter w = new BufferedWriter(new FileWriter(registro.getName(),true));
			w.write("Data e Hora:"+LocalDateTime.now().toString());
			w.newLine();
			w.write("Administrador: "+resp.getUsuario() + "-Matricula: " + resp.getMatricula());
			w.newLine();
			w.flush();
			w.close();
			Monitorar.salvaArquivo(registro.getName(), MONITOR.getIP(), intruso, laboratorio);
			System.out.println("Log gerado com sucesso.");
		} catch (Exception e) {
			System.out.println("Falha ao gerar o log.");
		}
	}
	
	private static void capturarPortas(){
		String ip = Ler.ip();
		if ( Monitorar.capturaProcessos(ip, ip+".txt") )
			System.out.println("Salvo no arquivo: " + ip+".txt");
		else
			System.out.println("Falha ao salvar o arquivo.");
	}
	
	private static void capturarPortasAll(ArrayList<String> hosts){
		for(String ip : hosts) {
		    if ( Monitorar.capturaProcessos(ip, ip+".txt") )
		     	System.out.println("Salvo no arquivo: " + ip+".txt");
		    else
		        System.out.println("Falha ao salvar o arquivo IP:"+ip);
		}
		
	}
	
	private static void capturaTela(){
		String ip = Ler.ip();
		if (Monitorar.capturaTela(ip, ip+".png")) 
			System.out.println("Salvo no arquivo: " + ip+".txt");
		else 
			System.out.println("Falha ao salvar o imagem.");		
		
	}
	
	private static void capturaTelaAll(ArrayList<String> hosts){
		for (String ip : hosts)
			if (Monitorar.capturaTela(ip, ip+".png"))
			    System.out.println("Salvo no arquivo: " + ip+".png");
			else 
				System.out.println("Falha ao salvar o imagem IP:" +ip);		
		
	}
	
	private static void desligarPC(){
		String ip = Ler.ip();
		if (Monitorar.desligarPIp(ip))
				System.out.print(ip+":Desligado");
	}
	
	private static void desligarAll(ArrayList<String> hosts){
		for(String ip : hosts)
			if (Monitorar.desligarPIp(ip))
				System.out.print(ip+":Desligado");
	}
	
	
	private static void infoConectados(ArrayList<String> hosts) {
		for (String ip : hosts)
			try {
                pcs.addComputador(Monitorar.infoUmDisp(ip));
			}catch (Exception ioe) {System.out.println(ioe.getMessage());}
		pcs.listarComputadores();
	}
	
	
	
	
	private static Responsavel login(){
		System.out.print("Usuario: ");
		String user = Ler.string();
		System.out.print("Matricula: ");
		String id = Ler.string();
		System.out.print("Senha: ");
		String pass = Ler.string();
		return new Responsavel(user, id, pass);
	}
	
	private static void addAdmin() {
		try {
			System.out.print("Usuario: ");
			String user = Ler.string();
			System.out.print("Matricula: ");
			String id = Ler.string();
			System.out.print("Senha: ");
			String pass = Ler.string();
			colResp.addResponsavel(new Responsavel(user,pass,id));
		}catch(Exception ioe) {System.out.println(ioe.getMessage());}
	}

	private static void delAdmin() {
		try {
			System.out.print("Matricula: ");
			String id = Ler.string();
			System.out.print("Senha: ");
			String pass = Ler.string();
		    colResp.removerAdmin(id,pass);
		    System.out.println("Usuario removido com sucesso");
		}catch(Exception ioe) {System.out.println(ioe.getMessage());}
	}
	

	private static void editAdmin() {
		try {
			System.out.print("Digite a matricula para verificacao: ");
			String matriculaOrig = Ler.string();
			System.out.print("Digite a senha para verificacao: ");
			String passOrig = Ler.string();
			if (colResp.verificar(matriculaOrig,passOrig)) {
				System.out.print("Digite novo Usuario: ");
				String user = Ler.string();
				System.out.print("Digite nova Matricula: ");
			    String matricula = Ler.string();
				System.out.print("Digite nova Senha: ");
				String pass = Ler.string();
				colResp.editar(matriculaOrig,passOrig,matricula,user,pass);
			}else System.out.println("Administrador invalido");
		
		}catch (Exception ioe) {System.out.println(ioe.getMessage());}
	}

	private static void listAdmin() {
		colResp.listar();
	}

}

